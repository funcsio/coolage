{"version":3,"sources":["utils/generateURL.ts","utils/colorTransformations.ts","assets/click-to-copy.svg","PickerContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["GenerateURL","schema","r","g","b","a","h","w","undefined","Math","round","RGBAToHexA","toString","length","PickerContainer","useEffect","ClipboardJS","useState","rgb","color","setColor","dimensions","setDimensions","Helmet","name","content","hex","data-react-helmet","Grid","container","style","margin","spacing","direction","justify","alignItems","item","md","onChange","Paper","padding","position","display","justifyContent","fontSize","TextField","placeholder","variant","size","type","width","value","e","parseInt","target","Typography","marginTop","marginBottom","overflowX","background","noWrap","id","bottom","right","src","IMG_Click2Copy","Fab","data-clipboard-action","data-clipboard-target","top","className","FileCopy","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79252cec.chunk.js","sourcesContent":["const Base_URL = \"https://coolage.herokuapp.com\";\n\ninterface IGenerateURLArgs {\n  r: number;\n  g: number;\n  b: number;\n  a?: number | undefined;\n  h: number;\n  w: number;\n}\nexport default function GenerateURL(schema: IGenerateURLArgs): String {\n  let { r, g, b, a, h, w } = schema;\n  if (a == undefined) {\n    a = 255;\n  } else {\n    a = Math.round(a * 255);\n  }\n\n  return `${Base_URL}/?h=${h}&w=${w}&r=${r}&g=${g}&g=${g}&b=${b}&a=${a}`;\n}\n\n","export function RGBAToHexA(\n  r: number | string,\n  g: number | string,\n  b: number | string,\n  a: any\n) {\n  r = r.toString(16);\n  g = g.toString(16);\n  b = b.toString(16);\n  a = a ? Math.round(a * 255).toString(16) : 255;\n\n  if (r.length === 1) r = \"0\" + r;\n  if (g.length === 1) g = \"0\" + g;\n  if (b.length === 1) b = \"0\" + b;\n  if (a.length === 1) a = \"0\" + a;\n\n  return \"#\" + r + g + b + a;\n}\n","export default __webpack_public_path__ + \"static/media/click-to-copy.f07fdec6.svg\";","import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  Paper,\n  TextField,\n  Typography,\n  IconButton,\n  Fab,\n} from \"@material-ui/core\";\nimport { ChromePicker, RGBColor, ColorResult } from \"react-color\";\nimport { FileCopy } from \"@material-ui/icons\";\nimport ClipboardJS from \"clipboard\";\nimport { Helmet } from \"react-helmet\";\n\nimport GenerateURL from \"./utils/generateURL\";\nimport {RGBAToHexA} from './utils/colorTransformations'\nimport IMG_Click2Copy from \"./assets/click-to-copy.svg\";\n\nexport default function PickerContainer() {\n  useEffect(() => {\n    new ClipboardJS(\".btn-to-copy\");\n  }, []);\n  const [color, setColor] = useState<any>({\n    rgb: {\n      a: 1,\n      b: 255,\n      g: 255,\n      r: 255,\n    },\n  });\n\n  const [dimensions, setDimensions] = useState({\n    h: 10,\n    w: 10,\n  });\n  return (\n    <>\n      <Helmet>\n        <meta name=\"theme-color\" content={color.hex} data-react-helmet=\"true\" />\n      </Helmet>\n      <Grid\n        container\n        style={{ margin: \"auto\" }}\n        spacing={3}\n        direction=\"row\"\n        justify=\"center\"\n        alignItems=\"center\"\n      >\n        <Grid item md={\"auto\"}>\n          <ChromePicker\n            color={color.rgb}\n            onChange={(color) => {\n              const { r, g, b, a } = color.rgb;\n              setColor({ ...color, hex: RGBAToHexA(r, g, b, a) });\n            }}\n          />\n        </Grid>\n        <Grid item md={\"auto\"}>\n          <Paper style={{ padding: \"1rem 0.5rem\", position: \"relative\" }}>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"space-evenly\",\n                alignItems: \"center\",\n                fontSize: \"0.75rem\",\n              }}\n            >\n              <TextField\n                placeholder=\"Width\"\n                variant=\"standard\"\n                size=\"small\"\n                type=\"number\"\n                style={{ width: 70 }}\n                value={dimensions.w}\n                onChange={(e) => {\n                  setDimensions({ ...dimensions, w: parseInt(e.target.value) });\n                }}\n              />\n              <Typography variant=\"caption\">x</Typography>\n              <TextField\n                placeholder=\"Height\"\n                variant=\"standard\"\n                size=\"small\"\n                type=\"number\"\n                style={{ width: 70 }}\n                value={dimensions.h}\n                onChange={(e) => {\n                  setDimensions({ ...dimensions, h: parseInt(e.target.value) });\n                }}\n              />\n            </div>\n            <div\n              style={{\n                padding: \"3px\",\n                display: \"flex\",\n                marginTop: \"0.5rem\",\n                marginBottom: \"1.5rem\",\n              }}\n            >\n              <div\n                style={{\n                  overflowX: \"scroll\",\n                  width: 200,\n                  padding: \"5px\",\n                  background: \"#eee\",\n                }}\n              >\n                <Typography variant=\"caption\" noWrap id=\"copy-cont\">\n                  {GenerateURL({ ...color.rgb, ...dimensions })}\n                </Typography>\n              </div>\n            </div>\n            <div\n              style={{\n                display: \"flex\",\n                position: \"absolute\",\n                bottom: \"-90px\",\n                right: \"-12%\",\n              }}\n            >\n              <img src={IMG_Click2Copy} style={{ width: 170 }} />\n              <Fab\n                data-clipboard-action=\"copy\"\n                data-clipboard-target=\"#copy-cont\"\n                variant=\"round\"\n                color=\"primary\"\n                style={{ top: \"-15px\" }}\n                className=\"btn-to-copy\"\n              >\n                <FileCopy fontSize=\"small\" />\n              </Fab>\n            </div>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport PickerCont from \"./PickerContainer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PickerCont />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}